{"version":3,"sources":["main.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","console","error","modal","handleLayoutKeyUp","id","hash","substr","keyCode","document","querySelector","handleOutWinClick","target","classList","contains","addEventListener","Array","prototype","slice","call","querySelectorAll","forEach","el"],"mappings":"CACA,WACA,YAMA,IAAAA,GAAAC,QAAA,cAAAC,OAAAC,SAAAC,UAEA,UAAAF,OAAAC,SAAAC,UAEAF,OAAAC,SAAAC,SAAAC,MACA,0DAIA,kBAAAC,aACA,WAAAJ,OAAAC,SAAAI,UAAAP,IACAM,UAAAE,cAAAC,SAAA,qBACAC,KAAA,SAAAC,GAEAA,EAAAC,cAAA,WAKA,GAAAN,UAAAE,cAAAK,WAAA,CAGA,GAAAC,GAAAH,EAAAI,UAEAD,GAAAE,cAAA,WACA,OAAAF,EAAAG,OACA,IAAA,YAKA,KAEA,KAAA,YACA,KAAA,IAAAC,OAAA,yDAvBAZ,SAgCA,SAAAa,GACAC,QAAAC,MAAA,4CAAAF,IAIA,IAAAG,IACAC,kBAAA,SAAAJ,GACA,GAAAK,GAAAtB,OAAAC,SAAAsB,KAAAC,OAAA,EACA,MAAAP,EAAAQ,SACAzB,OAAA0B,SAAAC,cAAA,IAAAL,EAAA,aACAtB,OAAAC,SAAAsB,KAAA,WAIAK,kBAAA,SAAAX,GACAA,EAAAY,OAAAC,UAAAC,SAAA,WACA/B,OAAAC,SAAAsB,KAAA,WAKAvB,QAAA0B,SAAAM,kBAAAhC,OAAA0B,SACAM,iBAAA,mBAAA,WACAC,MAAAC,UAAAC,MAAAC,KAAApC,OAAA0B,SAAAW,iBAAA,UAAA,GACAC,QAAA,SAAAC,GACAA,EAAAP,iBAAA,QAAAZ,EAAAQ,mBAAA,KAEA5B,OAAAgC,iBAAA,QAAAZ,EAAAC,mBAAA","file":"main.min.js","sourcesContent":["/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  var modal = {\n    handleLayoutKeyUp: function(e) {\n      var id = window.location.hash.substr(1);\n      if (e.keyCode === 27) {\n        if (window.document.querySelector('#' + id + '.target')) {\n          window.location.hash = '#start';\n        }\n      }\n    },\n    handleOutWinClick: function(e) {\n      if (e.target.classList.contains('modal')) {\n        window.location.hash = '#start';\n      }\n    }\n  };\n/* eslint-disable no-unused-expressions */\n  window.document.addEventListener && window.document\n    .addEventListener('DOMContentLoaded', function() {\n      Array.prototype.slice.call(window.document.querySelectorAll('.modal'), 0)\n        .forEach(function(el) {\n          el.addEventListener('click', modal.handleOutWinClick, false);\n        });\n      window.addEventListener('keyup', modal.handleLayoutKeyUp, false);\n    });\n})();\n"]}